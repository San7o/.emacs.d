;;; "Compiled" snippets and support files for `cmake-mode'  -*- lexical-binding:t -*-
;;; Snippet definitions:
;;;
(yas-define-snippets 'cmake-mode
                     '(("hello" "# ====================================================================\n# Project:   myproject\n# Author:    Giovanni Santini\n# Mail:      giovanni.santini@proton.me\n# Github:    @San7o\n# License:   MIT\n# ====================================================================\n\ncmake_minimum_required(VERSION 3.16)\n\nproject(myproject\n  VERSION 1.0\n  DESCRIPTION \"C++ project with Cmake\"\n  LANGUAGES CXX\n)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)  # no gnu extensions\n\nfind_program(CCACHE_PROGRAM ccache) # use ccache if available\nif(CCACHE_PROGRAM)\n  message(STATUS \"Using ccache: ${CCACHE_PROGRAM}\")\n  set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\nendif()\n\nif(MSVC)\n  set(WARNING_FLAGS /W4 /permissive-)\n  set(DEBUG_FLAGS /Zi /Od)\n  set(RELEASE_FLAGS /O2)\n  set(DEBUG_DEFINES _DEBUG)\nelseif(MINGW)\n  set(WARNING_FLAGS -Wall -Wextra -Wpedantic)\n  set(DEBUG_FLAGS -O0 -ggdb)\n  set(RELEASE_FLAGS -O3)\n  set(DEBUG_DEFINES DEBUG)\nelse()\n  set(WARNING_FLAGS -Wall -Wextra -Werror -Wpedantic)\n  set(DEBUG_FLAGS -O0 -ggdb -fsanitize=address)\n  set(RELEASE_FLAGS -O3)\n  set(DEBUG_DEFINES DEBUG)\n  set(DEBUG_LINK_FLAGS -fsanitize=address)\nendif()\n\n#\n# Options\n#\n\n#option(BUILD_SHARED_LIBS \"Build libraries as shared\" ON)\noption(ENABLE_TESTING \"Enable unit tests\" ON)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type (Debug, Release)\" FORCE)\nendif()\nmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\n#\n# Dependencies\n#\n\n# add_subdirectory(external/SFML)\n\n#\n# Sources and headers\n#\n\nset(SOURCES src/main.cpp)\n#set(HEADERS include/myproject.hpp)\n\n#\n# Targets\n#\n\nadd_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})\ntarget_include_directories(${PROJECT_NAME}\n  PRIVATE ${PROJECT_SOURCE_DIR}/include)\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  message(STATUS \"Configuring Debug build options...\")\n\n  target_compile_definitions(${PROJECT_NAME} PRIVATE ${DEBUG_DEFINES})\n  target_compile_options(${PROJECT_NAME}\n    PRIVATE ${DEBUG_FLAGS} ${WARNING_FLAGS})\n  if(NOT MSVC)\n    target_link_options(${PROJECT_NAME} PRIVATE ${DEBUG_LINK_FLAGS})\n  endif()\nelseif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n  message(STATUS \"Configuring Release build options...\")\n  target_compile_options(${PROJECT_NAME}\n    PRIVATE ${RELEASE_FLAGS} ${WARNING_FLAGS})\nendif()\n\n#\n# Installation\n#\n\ninstall(TARGETS ${PROJECT_NAME}\n  RUNTIME DESTINATION bin\n)\ninstall(DIRECTORY include/ DESTINATION include)\n\n#\n# Testing\n#\n\nif(ENABLE_TESTING)\n  message(WARNING \"Tests not present\")\n\n  #include(CTest)\n  #enable_testing()\n\n  #add_executable(tests test/test_main.cpp)\n  #target_link_libraries(tests PRIVATE ${PROJECT_NAME})\n\n  #add_test(NAME MyTests COMMAND tests)\nendif()\n\n#\n# Packaging support\n#\n\ninclude(CMakePackageConfigHelpers)\n\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n  VERSION ${PROJECT_VERSION}\n  COMPATIBILITY AnyNewerVersion\n)\n\n#\n# End of CMakeLists.txt\n# ====================================================================" "hello" nil nil nil "/home/santo/.emacs.d/snippets/cmake-mode/hello" nil nil)))


;;; Do not edit! File generated at Thu Oct 30 21:26:48 2025
